name: Propose QoS + Visibility PR
on:
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  propose:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Write: QoS portable workflow (canonical)
        shell: bash
        run: |
          mkdir -p .github/workflows
          cat > .github/workflows/commenthq-portable.yml << 'YAML'
          name: CommentHQ Portable (CI Live — QoS)

          on:
            push:
              branches: ["**"]
              tags: ["v*"]
              paths:
                - "tools/bundleme-gui/**"
                - ".github/workflows/commenthq-portable.yml"
            workflow_dispatch:

          concurrency:
            group: ${{ github.workflow }}-${{ github.ref }}
            cancel-in-progress: true

          jobs:
            win-portable:
              runs-on: windows-2022
              timeout-minutes: 30
              permissions:
                contents: write
              defaults:
                run:
                  shell: pwsh
                  working-directory: tools/bundleme-gui

              steps:
                - uses: actions/checkout@v4

                - uses: actions/setup-node@v4
                  with:
                    node-version: "20.19.4"
                    cache: "npm"
                    cache-dependency-path: tools/bundleme-gui/package-lock.json

                - name: Ensure lockfile (deterministic)
                  run: |
                    if (-not (Test-Path package-lock.json)) {
                      npm install --package-lock-only --no-audit --no-fund
                    }

                - name: Install deps (npm ci)
                  run: npm ci --no-audit --no-fund

                - name: Smoke: toolchain sanity
                  run: |
                    node -v
                    npm -v
                    node -e "require('./package.json'); console.log('package.json OK')"
                    node -e "require('fs').accessSync('.\\node_modules\\electron-builder'); console.log('electron-builder OK')"

                - name: Build portable
                  env:
                    DEBUG: electron-builder
                  run: .\\node_modules\\.bin\\electron-builder.cmd --win portable

                - name: Smoke: verify artifact
                  run: |
                    $exe = Get-ChildItem dist\\*.exe -ErrorAction SilentlyContinue | Sort-Object LastWriteTime -Descending | Select-Object -First 1
                    if (-not $exe) { throw "No .exe found in dist" }
                    Write-Host "Found:" $exe.FullName
                    $hash = Get-FileHash -Algorithm SHA256 -LiteralPath $exe.FullName
                    Write-Host "SHA256:" $hash.Hash
                    Get-ChildItem -Force dist | Select-Object Name,Length,LastWriteTime | Format-Table -AutoSize

                - name: Stage artifact + scan JSON
                  id: meta
                  run: |
                    New-Item -ItemType Directory -Path "$env:GITHUB_WORKSPACE\\out" -Force | Out-Null
                    $pkg = Get-Content package.json -Raw | ConvertFrom-Json
                    $ver = $pkg.version
                    $exe = Get-ChildItem dist\\*.exe | Sort-Object LastWriteTime -Descending | Select-Object -First 1
                    $name = "CommentHQ-BundleMe-GUI-$ver-portable.exe"
                    Copy-Item $exe.FullName "$env:GITHUB_WORKSPACE\\out\\$name" -Force
                    $hash = Get-FileHash -Algorithm SHA256 -LiteralPath "$env:GITHUB_WORKSPACE\\out\\$name"
                    $short = $env:GITHUB_SHA.Substring(0,7)
                    [pscustomobject]@{
                      path = "$env:GITHUB_WORKSPACE\\out\\$name"
                      sha256 = $hash.Hash
                      productVersion = $ver
                      fileSizeBytes = (Get-Item "$env:GITHUB_WORKSPACE\\out\\$name").Length
                      builtAt = (Get-Date).ToString("o")
                      ref = "${{ github.ref }}"
                      runId = "${{ github.run_id }}"
                      sha7 = $short
                      os = "${{ runner.os }}"
                      node = (node -v)
                      npm = (npm -v)
                    } | ConvertTo-Json -Depth 5 | Set-Content "$env:GITHUB_WORKSPACE\\out\\GUI-scan-$name.json"
                    echo "ver=$ver"  >> $env:GITHUB_OUTPUT
                    echo "sha7=$short" >> $env:GITHUB_OUTPUT

                - uses: actions/upload-artifact@v4
                  with:
                    name: commenthq-portable-${{ steps.meta.outputs.ver }}-${{ steps.meta.outputs.sha7 }}
                    path: out/*
                    if-no-files-found: error
                    retention-days: 14

                - name: Publish GitHub Release (tag only)
                  if: startsWith(github.ref, 'refs/tags/v')
                  uses: softprops/action-gh-release@v2
                  with:
                    files: out/*
                    fail_on_unmatched_files: true
                    generate_release_notes: true
          YAML

      - name: Write: Toggle visibility workflow
        shell: bash
        run: |
          mkdir -p .github/workflows
          cat > .github/workflows/toggle-visibility.yml << 'YAML'
          name: Toggle Visibility
          on:
            workflow_dispatch:
              inputs:
                visibility:
                  type: choice
                  options: [public, private]
                  required: true
                delayMinutes:
                  description: "Optional delay before applying (minutes)"
                  required: false
          jobs:
            toggle:
              runs-on: ubuntu-latest
              steps:
                - name: Optional delay
                  if: ${{ github.event.inputs.delayMinutes && github.event.inputs.delayMinutes != '' }}
                  run: sleep $(( 60 * ${{ github.event.inputs.delayMinutes }} ))
                - name: Apply visibility
                  env:
                    GH_TOKEN: ${{ secrets.REPO_ADMIN_TOKEN }}
                    TARGET: ${{ github.repository }}
                    VIS: ${{ github.event.inputs.visibility }}
                  run: |
                    if [ "$VIS" = "public" ]; then JSON='{"private": false}'; else JSON='{"private": true}'; fi
                    curl -sSL -X PATCH \
                      -H "Authorization: token $GH_TOKEN" -H "Accept: application/vnd.github+json" \
                      "https://api.github.com/repos/$TARGET" -d "$JSON"
          YAML

      - name: Write: CI migrate (disable legacy workflows)
        shell: bash
        run: |
          mkdir -p .github/workflows
          cat > .github/workflows/ci-migrate-disable-legacy.yml << 'YAML'
          name: CI Migrate — Disable Legacy Workflows
          on: { workflow_dispatch: {} }
          permissions: { contents: write }
          jobs:
            migrate:
              runs-on: ubuntu-latest
              steps:
                - uses: actions/checkout@v4
                - name: Move non-canonical workflows into legacy/
                  run: |
                    set -e
                    mkdir -p .github/workflows/legacy
                    shopt -s nullglob
                    keep1="commenthq-portable.yml"
                    keep2="toggle-visibility.yml"
                    for f in .github/workflows/*.yml .github/workflows/*.yaml; do
                      base="$(basename "$f")"
                      if [ "$base" != "$keep1" ] && [ "$base" != "$keep2" ]; then
                        git mv "$f" ".github/workflows/legacy/$base" || mv "$f" ".github/workflows/legacy/$base"
                      fi
                    done
                - name: Commit & push
                  run: |
                    git config user.name  "commenthq-bot"
                    git config user.email "bot@users.noreply.github.com"
                    git add -A
                    git commit -m "CI migrate: disable legacy workflows" || echo "No changes"
                    git push
          YAML

      - name: Write: GUI files (Visibility panel + IPC)
        shell: bash
        run: |
          mkdir -p tools/bundleme-gui/renderer
          cat > tools/bundleme-gui/package.json << 'JSON'
          {
            "name": "commenthq-bundleme-gui",
            "version": "0.7.1",
            "private": true,
            "description": "CommentHQ Bundle Me GUI (portable Windows builder)",
            "author": "Falcordog",
            "main": "main.js",
            "scripts": {
              "start": "electron .",
              "build:win": "electron-builder --win portable --x64",
              "pack": "electron-builder --dir"
            },
            "dependencies": {
              "keytar": "^7.9.0",
              "node-fetch": "^2.6.9"
            },
            "devDependencies": {
              "electron": "30.0.10",
              "electron-builder": "26.0.12"
            },
            "build": {
              "appId": "com.commenthq.bundleme",
              "productName": "CommentHQ BundleMe GUI",
              "asar": true,
              "directories": { "output": "dist" },
              "files": [ "main.js", "preload.js", "renderer/**/*", "package.json" ],
              "win": { "target": [ "portable" ], "artifactName": "CommentHQ-BundleMe-GUI-${version}-portable.exe" }
            }
          }
          JSON

          cat > tools/bundleme-gui/main.js << 'JS'
          const { app, BrowserWindow } = require('electron');
          const path = require('path');

          function createWindow() {
            const win = new BrowserWindow({
              width: 900, height: 640,
              webPreferences: {
                preload: path.join(__dirname, 'preload.js'),
                contextIsolation: true,
                nodeIntegration: false
              }
            });
            win.loadFile(path.join(__dirname, 'renderer', 'index.html'));
          }

          app.whenReady().then(createWindow);
          app.on('window-all-closed', () => { if (process.platform !== 'darwin') app.quit(); });

          // === CommentHQ Visibility IPC (GitHub API) ===
          const { ipcMain } = require('electron');
          const keytar = require('keytar');
          const fetch = require('node-fetch');
          const SERVICE = 'commenthq.github';
          const ACCOUNT = 'repo-admin-token';

          async function gh(path, method, body) {
            const token = await keytar.getPassword(SERVICE, ACCOUNT);
            if (!token) throw new Error('Missing GitHub token');
            const res = await fetch(`https://api.github.com${path}`, {
              method,
              headers: {
                'Authorization': `token ${token}`,
                'Accept': 'application/vnd.github+json',
                'Content-Type': 'application/json'
              },
              body: body ? JSON.stringify(body) : undefined
            });
            if (!res.ok) throw new Error(`${method} ${path} -> ${res.status}`);
            return res.json();
          }

          ipcMain.handle('repo:getToken', async () => Boolean(await keytar.getPassword(SERVICE, ACCOUNT)));
          ipcMain.handle('repo:saveToken', async (_e, token) => { await keytar.setPassword(SERVICE, ACCOUNT, token); return true; });
          ipcMain.handle('repo:clearToken', async () => { await keytar.deletePassword(SERVICE, ACCOUNT); return true; });

          ipcMain.handle('repo:get', async (_e, { owner, repo }) => gh(`/repos/${owner}/${repo}`, 'GET'));
          ipcMain.handle('repo:setVisibility', async (_e, { owner, repo, makePrivate }) =>
            gh(`/repos/${owner}/${repo}`, 'PATCH', { private: !!makePrivate }));
          ipcMain.handle('repo:dispatchAutoreprivate', async (_e, { owner, repo, minutes }) =>
            gh(`/repos/${owner}/${repo}/actions/workflows/toggle-visibility.yml/dispatches`, 'POST', {
              ref: 'main',
              inputs: { visibility: 'private', delayMinutes: String(minutes||15) }
            }));
          // === /Visibility IPC ===
          JS

          cat > tools/bundleme-gui/preload.js << 'JS'
          const { contextBridge, ipcRenderer } = require('electron');
          contextBridge.exposeInMainWorld('repo', {
            hasToken: () => ipcRenderer.invoke('repo:getToken'),
            saveToken: (t) => ipcRenderer.invoke('repo:saveToken', t),
            clearToken: () => ipcRenderer.invoke('repo:clearToken'),
            get: (o,r) => ipcRenderer.invoke('repo:get', { owner:o, repo:r }),
            setVisibility: (o,r,makePrivate) => ipcRenderer.invoke('repo:setVisibility', { owner:o, repo:r, makePrivate }),
            scheduleReprivate: (o,r,mins) => ipcRenderer.invoke('repo:dispatchAutoreprivate', { owner:o, repo:r, minutes: mins })
          });
          JS

          cat > tools/bundleme-gui/renderer/index.html << 'HTML'
          <!doctype html>
          <html>
            <head>
              <meta charset="utf-8" />
              <title>CommentHQ BundleMe GUI</title>
              <style>body{font-family:system-ui,Segoe UI,Arial,sans-serif;padding:16px}</style>
            </head>
            <body>
              <h1>CommentHQ BundleMe GUI</h1>
              <p>Portable EXE builder + Repo Visibility controls.</p>

              <section id="vis-panel" style="margin-top:16px;padding:12px;border:1px solid #ccc;border-radius:10px">
                <h2 style="margin:0 0 8px 0">Repo Visibility</h2>
                <div style="display:flex;gap:8px;align-items:center;flex-wrap:wrap">
                  <label>Repo: <input id="repo-slug" placeholder="Falcordog/youtube-comment-hq" style="width:260px"></label>
                  <label>Token: <input id="gh-token" type="password" placeholder="Fine-grained PAT (admin: this repo only)" style="width:320px"></label>
                  <button id="save-token">Save token</button>
                  <button id="clear-token">Clear token</button>
                </div>
                <div style="margin-top:8px;display:flex;gap:8px;flex-wrap:wrap">
                  <button id="btn-public">Make Public (15m auto-private)</button>
                  <button id="btn-private">Make Private Now</button>
                  <button id="btn-status">Check Status</button>
                </div>
                <pre id="vis-log" style="margin-top:8px;background:#f8f8f8;padding:8px;border-radius:8px;max-height:200px;overflow:auto"></pre>
              </section>

              <script src="renderer.js"></script>
            </body>
          </html>
          HTML

          cat > tools/bundleme-gui/renderer/renderer.js << 'JS'
          console.log('BundleMe GUI loaded');
          (function(){
            const $ = (s)=>document.querySelector(s);
            const log = (m)=>{ const el=$("#vis-log"); if(!el) return; el.textContent += (m+"\\n"); el.scrollTop=el.scrollHeight; };
            const slugEl=$("#repo-slug"), tokEl=$("#gh-token");
            $("#save-token")?.addEventListener("click", async ()=>{
              const t = tokEl.value.trim(); if(!t){ log("
