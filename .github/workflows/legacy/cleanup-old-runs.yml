name: Cleanup old workflow runs & artifacts

on:
  workflow_dispatch:
    inputs:
      days:
        description: "Delete artifacts older than N days"
        required: true
        default: "7"
      deleteFailedRuns:
        description: "Also delete failed/timed_out runs (true/false)"
        required: true
        default: "true"

jobs:
  cleanup:
    runs-on: ubuntu-latest
    permissions:
      actions: write
    steps:
      - name: Delete old artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const days = parseInt(core.getInput('days'), 10);
            const cutoff = Date.now() - (days * 86400000);
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            let deletedArtifacts = 0;
            for await (const { data: artifacts } of github.paginate.iterator(github.rest.actions.listArtifactsForRepo, { owner, repo, per_page: 100 })) {
              for (const art of artifacts) {
                const created = new Date(art.created_at).getTime();
                if (created < cutoff) {
                  try {
                    await github.rest.actions.deleteArtifact({ owner, repo, artifact_id: art.id });
                    deletedArtifacts++;
                  } catch (e) {
                    core.warning(`Failed to delete artifact ${art.name} (${art.id}): ${e.message}`);
                  }
                }
              }
            }
            core.info(`Deleted ${deletedArtifacts} artifacts older than ${days} days.`);

      - name: Delete failed/time_out runs (optional)
        if: ${{ inputs.deleteFailedRuns == 'true' }}
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            let deletedRuns = 0;
            for await (const { data: runs } of github.paginate.iterator(github.rest.actions.listWorkflowRunsForRepo, { owner, repo, per_page: 100 })) {
              for (const run of runs) {
                if (['failure','timed_out','cancelled','stale'].includes(run.conclusion || '')) {
                  try {
                    await github.rest.actions.deleteWorkflowRun({ owner, repo, run_id: run.id });
                    deletedRuns++;
                  } catch (e) {
                    core.warning(`Failed to delete run ${run.id}: ${e.message}`);
                  }
                }
              }
            }
            core.info(`Deleted ${deletedRuns} failed/timed_out runs.`)
