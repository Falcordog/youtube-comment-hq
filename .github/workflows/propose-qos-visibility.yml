name: Propose QoS + Visibility PR
on:
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  propose:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Write: QoS portable workflow (canonical)
        shell: bash
        run: |
          mkdir -p .github/workflows
          cat > .github/workflows/commenthq-portable.yml << 'YAML'
          name: CommentHQ Portable (CI Live — QoS)

          on:
            push:
              branches: ["**"]
              tags: ["v*"]
              paths:
                - "tools/bundleme-gui/**"
                - ".github/workflows/commenthq-portable.yml"
            workflow_dispatch:

          concurrency:
            group: ${{ github.workflow }}-${{ github.ref }}
            cancel-in-progress: true

          jobs:
            win-portable:
              runs-on: windows-2022
              timeout-minutes: 30
              permissions:
                contents: write
              defaults:
                run:
                  shell: pwsh
                  working-directory: tools/bundleme-gui

              steps:
                - uses: actions/checkout@v4

                - uses: actions/setup-node@v4
                  with:
                    node-version: "20.19.4"
                    cache: "npm"
                    cache-dependency-path: tools/bundleme-gui/package-lock.json

                - name: Ensure lockfile (deterministic)
                  run: |
                    if (-not (Test-Path package-lock.json)) {
                      npm install --package-lock-only --no-audit --no-fund
                    }

                - name: Install deps (npm ci)
                  run: npm ci --no-audit --no-fund

                - name: Smoke: toolchain sanity
                  run: |
                    node -v
                    npm -v
                    node -e "require('./package.json'); console.log('package.json OK')"
                    node -e "require('fs').accessSync('.\\node_modules\\electron-builder'); console.log('electron-builder OK')"

                - name: Build portable
                  env:
                    DEBUG: electron-builder
                  run: .\\node_modules\\.bin\\electron-builder.cmd --win portable

                - name: Smoke: verify artifact
                  run: |
                    $exe = Get-ChildItem dist\\*.exe -ErrorAction SilentlyContinue | Sort-Object LastWriteTime -Descending | Select-Object -First 1
                    if (-not $exe) { throw "No .exe found in dist" }
                    Write-Host "Found:" $exe.FullName
                    $hash = Get-FileHash -Algorithm SHA256 -LiteralPath $exe.FullName
                    Write-Host "SHA256:" $hash.Hash
                    Get-ChildItem -Force dist | Select-Object Name,Length,LastWriteTime | Format-Table -AutoSize

                - name: Stage artifact + scan JSON
                  id: meta
                  run: |
                    New-Item -ItemType Directory -Path "$env:GITHUB_WORKSPACE\\out" -Force | Out-Null
                    $pkg = Get-Content package.json -Raw | ConvertFrom-Json
                    $ver = $pkg.version
                    $exe = Get-ChildItem dist\\*.exe | Sort-Object LastWriteTime -Descending | Select-Object -First 1
                    $name = "CommentHQ-BundleMe-GUI-$ver-portable.exe"
                    Copy-Item $exe.FullName "$env:GITHUB_WORKSPACE\\out\\$name" -Force
                    $hash = Get-FileHash -Algorithm SHA256 -LiteralPath "$env:GITHUB_WORKSPACE\\out\\$name"
                    $short = $env:GITHUB_SHA.Substring(0,7)
                    [pscustomobject]@{
                      path = "$env:GITHUB_WORKSPACE\\out\\$name"
                      sha256 = $hash.Hash
                      productVersion = $ver
                      fileSizeBytes = (Get-Item "$env:GITHUB_WORKSPACE\\out\\$name").Length
                      builtAt = (Get-Date).ToString("o")
                      ref = "${{ github.ref }}"
                      runId = "${{ github.run_id }}"
                      sha7 = $short
                      os = "${{ runner.os }}"
                      node = (node -v)
                      npm = (npm -v)
                    } | ConvertTo-Json -Depth 5 | Set-Content "$env:GITHUB_WORKSPACE\\out\\GUI-scan-$name.json"
                    echo "ver=$ver"  >> $env:GITHUB_OUTPUT
                    echo "sha7=$short" >> $env:GITHUB_OUTPUT

                - uses: actions/upload-artifact@v4
                  with:
                    name: commenthq-portable-${{ steps.meta.outputs.ver }}-${{ steps.meta.outputs.sha7 }}
                    path: out/*
                    if-no-files-found: error
                    retention-days: 14

                - name: Publish GitHub Release (tag only)
                  if: startsWith(github.ref, 'refs/tags/v')
                  uses: softprops/action-gh-release@v2
                  with:
                    files: out/*
                    fail_on_unmatched_files: true
                    generate_release_notes: true
          YAML

      - name: Write: Toggle visibility workflow
        shell: bash
        run: |
          mkdir -p .github/workflows
          cat > .github/workflows/toggle-visibility.yml << 'YAML'
          name: Toggle Visibility
          on:
            workflow_dispatch:
              inputs:
                visibility:
                  type: choice
                  options: [public, private]
                  required: true
                delayMinutes:
                  description: "Optional delay before applying (minutes)"
                  required: false
          jobs:
            toggle:
              runs-on: ubuntu-latest
              steps:
                - name: Optional delay
                  if: ${{ github.event.inputs.delayMinutes && github.event.inputs.delayMinutes != '' }}
                  run: sleep $(( 60 * ${{ github.event.inputs.delayMinutes }} ))
                - name: Apply visibility
                  env:
                    GH_TOKEN: ${{ secrets.REPO_ADMIN_TOKEN }}
                    TARGET: ${{ github.repository }}
                    VIS: ${{ github.event.inputs.visibility }}
                  run: |
                    if [ "$VIS" = "public" ]; then JSON='{"private": false}'; else JSON='{"private": true}'; fi
                    curl -sSL -X PATCH \
                      -H "Authorization: token $GH_TOKEN" -H "Accept: application/vnd.github+json" \
                      "https://api.github.com/repos/$TARGET" -d "$JSON"
          YAML

      - name: Write: CI migrate (disable legacy workflows)
        shell: bash
        run: |
          mkdir -p .github/workflows
          cat > .github/workflows/ci-migrate-disable-legacy.yml << 'YAML'
          name: CI Migrate — Disable Legacy Workflows
          on: { workflow_dispatch: {} }
          permissions: { contents: write }
          jobs:
            migrate:
              runs-on: ubuntu-latest
              steps:
                - uses: actions/checkout@v4
                - name: Move non-canonical workflows into legacy/
                  run: |
                    set -e
                    mkdir -p .github/workflows/legacy
                    shopt -s nullglob
                    keep1="commenthq-portable.yml"
                    keep2="toggle-visibility.yml"
                    for f in .github/workflows/*.yml .github/workflows/*.yaml; do
                      base="$(basename "$f")"
                      if [ "$base" != "$keep1" ] && [ "$base" != "$keep2" ]; then
                        git mv "$f" ".github/workflows/legacy/$base" || mv "$f" ".github/workflows/legacy/$base"
                      fi
                    done
                - name: Commit & push
                  run: |
                    git config user.name  "commenthq-bot"
                    git config user.email "bot@users.noreply.github.com"
                    git add -A
                    git commit -m "CI migrate: disable legacy workflows" || echo "No changes"
                    git push
          YAML

      - name: Write: GUI files (Visibility panel + IPC)
        shell: bash
        run: |
          mkdir -p tools/bundleme-gui/renderer
          cat > tools/bundleme-gui/package.json <<
