name: Build CommentHQ â€” Minimal Pinned

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
    paths:
      - ".github/workflows/build-commenthq-minimal-pinned.yml"
      - "package.json"
      - "package-lock.json"
      - "src-tauri/**"
      - "app/**"

permissions:
  contents: read

env:
  NODE_VERSION: "20.19.4"

jobs:
  build-windows:
    runs-on: windows-2022
    timeout-minutes: 35

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install Rust (stable)
        uses: dtolnay/rust-toolchain@stable

      - name: Install NSIS (for Windows bundling)
        shell: pwsh
        run: |
          choco install nsis -y
          $env:Path = "$env:ProgramFiles\NSIS;$env:Path"

      # ---------- Inline guard: no external files required ----------
      - name: GUI Ready Check (inline)
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          function Fail($m){ Write-Host "::error:: $m"; throw $m }
          if (!(Test-Path package.json)) { Fail "package.json missing at repo root." }
          if (!(Test-Path package-lock.json)) { Fail "package-lock.json missing (required for npm ci)." }
          if (!(Test-Path src-tauri/tauri.conf.json)) { Fail "src-tauri/tauri.conf.json missing." }
          if (!(Test-Path tools/bundleme-gui)) { Write-Host "::warning:: tools/bundleme-gui not found (not fatal)." }
          Write-Host "GUI_READY = TRUE"

      - name: Install JS deps (deterministic)
        shell: pwsh
        run: |
          npm ci

      - name: Build Tauri (Windows)
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          projectPath: "."
          args: "--target x86_64-pc-windows-msvc"

      - name: Locate bundle
        id: collect
        shell: pwsh
        run: |
          $bundle = Join-Path "src-tauri" "target\release\bundle"
          if (!(Test-Path $bundle)) {
            Write-Error "Expected bundle directory not found at $bundle"
          }
          Write-Host "Bundle path: $bundle"
          echo "bundle=$bundle" >> $env:GITHUB_OUTPUT

      # ---------- Inline SHA256: no external files required ----------
      - name: Generate SHA256.json (inline)
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $in = "${{ steps.collect.outputs.bundle }}"
          if (!(Test-Path $in)) { throw "InputDir not found: $in" }
          $hashes = @()
          Get-ChildItem -Path $in -Recurse -File | ForEach-Object {
            $h = Get-FileHash -Algorithm SHA256 -Path $_.FullName
            $hashes += [pscustomobject]@{ file = $_.FullName; sha256 = $h.Hash.ToLower() }
          }
          $hashes | ConvertTo-Json -Depth 3 | Out-File -FilePath "SHA256.json" -Encoding utf8
          Write-Host "Wrote SHA256.json with $($hashes.Count) entries."

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: CommentHQ-windows-build
          path: |
            ${{ steps.collect.outputs.bundle }}/**
            SHA256.json
          if-no-files-found: error
